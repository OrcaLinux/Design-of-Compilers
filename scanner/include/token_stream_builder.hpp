/**
 * @file TokenStreamBuilder.hpp
 * @brief Provides the TokenStreamBuilder class for orchestrating the tokenization process.
 *
 * The TokenStreamBuilder handles file I/O and interacts with the Lexer to tokenize the input.
 */

#ifndef TokenStreamBuilder_HPP
#define TokenStreamBuilder_HPP

#include <string>
#include <vector>

#include "scanner.hpp"
#include "token.hpp"

/**
 * @class TokenStreamBuilder
 * @brief Manages the scanning process for TINY language source code.
 *
 * The TokenStreamBuilder class is responsible for orchestrating the tokenization process.
 * It get the tokens generated by the Scanner and append them in a vector of tokens.
 */
class TokenStreamBuilder {
   public:
    /**
     * @brief Constructs a TokenStreamBuilder object with the given input file.
     *
     * @param scanner The scanner object to be used for tokenization.
     *
     * @note The TokenStreamBuilder does not take ownership of the Scanner object.
     * @note The Scanner object must be initialized with the input file before constructing the TokenStreamBuilder.
     *
     * @see Scanner
     */
    TokenStreamBuilder(Scanner &scanner);

    /**
     * @brief Tokenizes the input file and stores the tokens in a vector.
     */
    void build();

    /**
     * @brief Gets the vector of tokens generated from the input file.
     *
     * @return The vector of tokens.
     */
    const std::vector<Token> &getTokens() const;

   private:
    Scanner &scanner;          /**< The scanner object used for tokenization */
    std::vector<Token> tokens; /**< The vector of tokens generated from the input file */
};

#endif  // TokenStreamBuilder_HPP
