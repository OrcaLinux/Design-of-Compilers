/**
 * @file TokenStreamBuilder.hpp
 * @brief Provides the TokenStreamBuilder class for orchestrating the tokenization process.
 *
 * The TokenStreamBuilder handles file I/O and interacts with the Scanner to tokenize the input.
 */

#ifndef TOKEN_STREAM_BUILDER_HPP
#define TOKEN_STREAM_BUILDER_HPP

#include <string>
#include <vector>

#include "scanner.hpp"
#include "token.hpp"

/**
 * @namespace TINY
 * @brief Contains all components of the TINY language scanner.
 *
 * The `TINY` namespace organizes all classes, functions, and utilities
 * related to the lexical analysis of the TINY programming language.
 */
namespace TINY
{
    /**
     * @namespace SCANNER
     * @brief Contains all components related to the lexical analysis (scanning) of TINY language.
     */
    namespace SCANNER
    {

        /**
         * @class TokenStreamBuilder
         * @brief Manages the scanning process for TINY language source code.
         *
         * The `TokenStreamBuilder` class orchestrates the tokenization process. It uses the `Scanner`
         * class to generate tokens and appends them to a vector of tokens for further processing.
         */
        class TokenStreamBuilder
        {
        public:
            /**
             * @brief Constructs a TokenStreamBuilder object with the given Scanner object.
             *
             * This constructor initializes the `TokenStreamBuilder` with a reference to a `Scanner` object,
             * which is used to generate tokens from the input source code.
             *
             * @param scanner The `Scanner` object to be used for tokenization.
             *
             * @note The `TokenStreamBuilder` does not take ownership of the `Scanner` object.
             *       The `Scanner` object must be properly initialized before constructing the `TokenStreamBuilder`.
             *
             * @see Scanner
             */
            TokenStreamBuilder(Scanner &scanner);

            /**
             * @brief Tokenizes the input source code and stores the tokens in a vector.
             *
             * This method processes the input source code using the `Scanner` object to generate tokens.
             * It appends the generated tokens to an internal vector for further use.
             */
            void build();

            /**
             * @brief Retrieves the vector of tokens generated from the input source code.
             *
             * This method provides access to the vector of tokens generated by the `Scanner`.
             *
             * @return A constant reference to the vector of tokens.
             */
            const std::vector<Token> &getTokens() const;

        private:
            Scanner &scanner;          /**< The `Scanner` object used for tokenization. */
            std::vector<Token> tokens; /**< A vector storing the tokens generated from the input source code. */
        };
    } // namespace SCANNER
} // namespace TINY

#endif // TOKEN_STREAM_BUILDER_HPP
